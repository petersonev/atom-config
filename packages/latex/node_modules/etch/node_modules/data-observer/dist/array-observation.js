var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _Disposable$Emitter = require('event-kit');

var _ArrayPatch = require('./array-patch');

var _ArrayPatch2 = _interopRequireWildcard(_ArrayPatch);

var _ArrayMapObservation = require('./array-map-observation');

var _ArrayMapObservation2 = _interopRequireWildcard(_ArrayMapObservation);

'use babel';

var ArrayObservation = (function () {
  function ArrayObservation(array) {
    _classCallCheck(this, ArrayObservation);

    this.array = array;
    this.emitter = new _Disposable$Emitter.Emitter();
    this.arrayDidChange = this.arrayDidChange.bind(this);
    this.subscriberCount = 0;
  }

  _createClass(ArrayObservation, [{
    key: 'getValues',
    value: function getValues() {
      return this.array.slice();
    }
  }, {
    key: 'onDidChangeValues',
    value: function onDidChangeValues(fn) {
      var _this = this;

      if (++this.subscriberCount === 1) {
        Array.observe(this.array, this.arrayDidChange);
      }

      var disposable = this.emitter.on('did-change-values', fn);

      return new _Disposable$Emitter.Disposable(function () {
        disposable.dispose();
        if (--_this.subscriberCount === 0) {
          Array.unobserve(_this.array, _this.arrayDidChange);
        }
      });
    }
  }, {
    key: 'map',
    value: function map(fn) {
      return new _ArrayMapObservation2['default'](this, fn);
    }
  }, {
    key: 'arrayDidChange',
    value: function arrayDidChange(changes) {
      var _this2 = this;

      var patch = new _ArrayPatch2['default']();

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = changes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _step$value = _step.value;
          var type = _step$value.type;
          var index = _step$value.index;
          var removed = _step$value.removed;
          var addedCount = _step$value.addedCount;

          if (type === 'splice') {
            patch.splice(index, removed.length, addedCount);
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator['return']) {
            _iterator['return']();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      // setImmediate allows uncaught exceptions to be reported in Node 0.12.0
      setImmediate(function () {
        var coalescedChanges = patch.getChanges().map(function (_ref) {
          var index = _ref.index;
          var removedCount = _ref.removedCount;
          var addedCount = _ref.addedCount;
          return { index: index, removedCount: removedCount, added: _this2.array.slice(index, index + addedCount) };
        });
        _this2.emitter.emit('did-change-values', coalescedChanges);
      });
    }
  }]);

  return ArrayObservation;
})();

exports['default'] = ArrayObservation;
module.exports = exports['default'];