var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _Disposable$Emitter = require('event-kit');

'use babel';

var ScalarMapObservation = (function () {
  function ScalarMapObservation(operand, transform) {
    _classCallCheck(this, ScalarMapObservation);

    this.operand = operand;
    this.transform = transform;
    this.emitter = new _Disposable$Emitter.Emitter();
    this.operandDidChangeValue = this.operandDidChangeValue.bind(this);
    this.subscriberCount = 0;
    this.operandDisposable = null;
  }

  _createClass(ScalarMapObservation, [{
    key: 'getValue',
    value: function getValue() {
      return this.transform(this.operand.getValue());
    }
  }, {
    key: 'onDidChangeValue',
    value: function onDidChangeValue(fn) {
      var _this = this;

      if (++this.subscriberCount === 1) {
        this.operandDisposable = this.operand.onDidChangeValue(this.operandDidChangeValue);
      }

      var disposable = this.emitter.on('did-change-value', fn);

      return new _Disposable$Emitter.Disposable(function () {
        disposable.dispose();
        if (--_this.subscriberCount === 0) {
          _this.operandDisposable.dispose();
        }
      });
    }
  }, {
    key: 'map',
    value: function map(transform) {
      return new ScalarMapObservation(this, transform);
    }
  }, {
    key: 'operandDidChangeValue',
    value: function operandDidChangeValue(value) {
      this.emitter.emit('did-change-value', this.transform(value));
    }
  }]);

  return ScalarMapObservation;
})();

exports['default'] = ScalarMapObservation;
module.exports = exports['default'];