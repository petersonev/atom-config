var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, '__esModule', {
  value: true
});
var idCounter = 0;

var SegmentTreeNode = (function () {
  function SegmentTreeNode(parent, inputLeftExtent, outputLeftExtent) {
    _classCallCheck(this, SegmentTreeNode);

    this.parent = parent;
    this.inputLeftExtent = inputLeftExtent;
    this.outputLeftExtent = outputLeftExtent;
    this.inputExtent = inputLeftExtent;
    this.outputExtent = outputLeftExtent;

    this.id = ++idCounter;
    this.priority = Infinity;
    this.isChangeStart = false;
    this.isChangeEnd = false;
  }

  _createClass(SegmentTreeNode, [{
    key: 'toHTML',
    value: function toHTML() {
      var s = '<style>';
      s += 'table { width: 100%; }';
      s += 'td { width: 50%; text-align: center; border: 1px solid gray; white-space: nowrap; }';
      s += '</style>';

      s += '<table>';

      s += '<tr>';

      var changeStart = this.isChangeStart ? '&lt;&lt; ' : '';
      var changeEnd = this.isChangeEnd ? ' &gt;&gt;' : '';

      s += '<td colspan="2">' + changeStart + this.inputLeftExtent + ', ' + this.outputLeftExtent + changeEnd + '</td>';
      s += '</tr>';

      s += '<tr>';
      s += '<td>';
      if (this.left) {
        s += this.left.toHTML();
      } else {
        s += '&nbsp;';
      }
      s += '</td>';
      s += '<td>';
      if (this.right) {
        s += this.right.toHTML();
      } else {
        s += '&nbsp;';
      }
      s += '</td>';
      s += '</tr>';

      s += '</table>';

      return s;
    }
  }]);

  return SegmentTreeNode;
})();

exports['default'] = SegmentTreeNode;
module.exports = exports['default'];