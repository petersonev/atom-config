var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _Disposable$Emitter = require('event-kit');

'use babel';

var ArrayMapObservation = (function () {
  function ArrayMapObservation(operand, transform) {
    _classCallCheck(this, ArrayMapObservation);

    this.operand = operand;
    this.transform = transform;
    this.emitter = new _Disposable$Emitter.Emitter();
    this.operandDidChangeValues = this.operandDidChangeValues.bind(this);
    this.subscriberCount = 0;
    this.operandDisposable = null;
  }

  _createClass(ArrayMapObservation, [{
    key: 'getValues',
    value: function getValues() {
      return this.operand.getValues().map(this.transform);
    }
  }, {
    key: 'onDidChangeValues',
    value: function onDidChangeValues(fn) {
      var _this = this;

      if (++this.subscriberCount === 1) {
        this.operandDisposable = this.operand.onDidChangeValues(this.operandDidChangeValues);
      }

      var disposable = this.emitter.on('did-change-values', fn);

      return new _Disposable$Emitter.Disposable(function () {
        disposable.dispose();
        if (--_this.subscriberCount === 0) {
          _this.operandDisposable.dispose();
        }
      });
    }
  }, {
    key: 'map',
    value: function map(transform) {
      return new ArrayMapObservation(this, transform);
    }
  }, {
    key: 'operandDidChangeValues',
    value: function operandDidChangeValues(changes) {
      var _this2 = this;

      this.emitter.emit('did-change-values', changes.map(function (_ref) {
        var index = _ref.index;
        var removedCount = _ref.removedCount;
        var added = _ref.added;
        return { index: index, removedCount: removedCount, added: added.map(_this2.transform) };
      }));
    }
  }]);

  return ArrayMapObservation;
})();

exports['default'] = ArrayMapObservation;
module.exports = exports['default'];