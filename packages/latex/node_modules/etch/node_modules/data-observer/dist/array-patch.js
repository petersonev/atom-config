var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _SegmentTree = require('./segment-tree');

var _SegmentTree2 = _interopRequireWildcard(_SegmentTree);

'use babel';

var ArrayPatch = (function () {
  function ArrayPatch(randomSeed) {
    _classCallCheck(this, ArrayPatch);

    this.segmentTree = new _SegmentTree2['default'](randomSeed);
  }

  _createClass(ArrayPatch, [{
    key: 'splice',
    value: function splice(spliceStart, removedCount, addedCount) {
      this.segmentTree.splice(spliceStart, removedCount, addedCount);
    }
  }, {
    key: 'getChanges',
    value: function getChanges() {
      var changes = [];
      var iterator = this.segmentTree.buildIteratorAtStart();

      do {
        if (iterator.inChange()) {
          changes.push({
            index: iterator.getOutputStart(),
            removedCount: iterator.getInputEnd() - iterator.getInputStart(),
            addedCount: iterator.getOutputEnd() - iterator.getOutputStart()
          });
        }
      } while (!iterator.next().done);

      return changes;
    }
  }]);

  return ArrayPatch;
})();

exports['default'] = ArrayPatch;
module.exports = exports['default'];