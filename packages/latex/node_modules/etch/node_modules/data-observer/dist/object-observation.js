var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _Disposable$Emitter = require('event-kit');

var _ScalarMapObservation = require('./scalar-map-observation');

var _ScalarMapObservation2 = _interopRequireWildcard(_ScalarMapObservation);

'use babel';

var ObjectObservation = (function () {
  function ObjectObservation(object) {
    for (var _len = arguments.length, rest = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      rest[_key - 1] = arguments[_key];
    }

    _classCallCheck(this, ObjectObservation);

    this.object = object;

    if (rest.length > 0) {
      this.transform = typeof last(rest) === 'function' ? rest.pop() : null;
      if (rest.length > 1 && !this.transform) {
        throw new Error('Observing multiple properties requires a function to combine them into a single value.');
      }
      this.observedProperties = rest;
      this.observedPropertiesSet = new Set(this.observedProperties);
    }

    this.emitter = new _Disposable$Emitter.Emitter();
    this.objectDidChange = this.objectDidChange.bind(this);
    this.subscriberCount = 0;
  }

  _createClass(ObjectObservation, [{
    key: 'getValue',
    value: function getValue() {
      var _this = this;

      if (this.observedProperties.length > 0) {
        if (!this.transform && this.observedProperties.length === 1) {
          return this.object[this.observedProperties[0]];
        } else {
          var propertyValues = this.observedProperties.map(function (propertyName) {
            return _this.object[propertyName];
          });
          return this.transform.apply(null, propertyValues);
        }
      } else {
        if (this.transform) {
          return this.transform.call(null, this.object);
        } else {
          return this.object;
        }
      }
    }
  }, {
    key: 'onDidChangeValue',
    value: function onDidChangeValue(fn) {
      var _this2 = this;

      if (++this.subscriberCount === 1) {
        Object.observe(this.object, this.objectDidChange);
      }

      var disposable = this.emitter.on('did-change-value', fn);

      return new _Disposable$Emitter.Disposable(function () {
        disposable.dispose();
        if (--_this2.subscriberCount === 0) {
          Object.unobserve(_this2.object, _this2.objectDidChange);
        }
      });
    }
  }, {
    key: 'map',
    value: function map(transform) {
      return new _ScalarMapObservation2['default'](this, transform);
    }
  }, {
    key: 'objectDidChange',
    value: function objectDidChange(changes) {
      var _this3 = this;

      setImmediate(function () {
        if (_this3.observedPropertiesSet) {
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = changes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var change = _step.value;

              if (_this3.observedPropertiesSet.has(change.name)) {
                _this3.emitter.emit('did-change-value', _this3.getValue());
                break;
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator['return']) {
                _iterator['return']();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        } else {
          _this3.emitter.emit('did-change-value', _this3.object);
        }
      });
    }
  }]);

  return ObjectObservation;
})();

exports['default'] = ObjectObservation;

function last(array) {
  return array[array.length - 1];
}
module.exports = exports['default'];